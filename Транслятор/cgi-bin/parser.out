Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaringvariables descriptionofcalculations
Rule 2     declaringvariables -> TYPE listofvariables SEMICOLON
Rule 3     listofvariables -> identifier COMMA listofvariables
Rule 4     listofvariables -> identifier
Rule 5     identifier -> IDENTIFIER
Rule 6     descriptionofcalculations -> listofassignments
Rule 7     listofassignments -> assignment listofassignments
Rule 8     listofassignments -> assignment
Rule 9     assignment -> identifier ASSIGN expression
Rule 10    expression -> BINARY_UNARY_MINUS subexpression
Rule 11    expression -> subexpression
Rule 12    subexpression -> LEFT_BRACKET expression RIGHT_BRACKET
Rule 13    subexpression -> expression BINARY_PLUS expression
Rule 14    subexpression -> expression BINARY_UNARY_MINUS expression
Rule 15    subexpression -> expression BINARY_MULTIPLY expression
Rule 16    subexpression -> expression BINARY_DIVIDE expression
Rule 17    subexpression -> operand
Rule 18    operand -> identifier
Rule 19    operand -> constant
Rule 20    constant -> CONSTANT

Terminals, with rules where they appear

ASSIGN               : 9
BINARY_DIVIDE        : 16
BINARY_MULTIPLY      : 15
BINARY_PLUS          : 13
BINARY_UNARY_MINUS   : 10 14
COMMA                : 3
CONSTANT             : 20
IDENTIFIER           : 5
LEFT_BRACKET         : 12
RIGHT_BRACKET        : 12
SEMICOLON            : 2
TYPE                 : 2
error                : 

Nonterminals, with rules where they appear

assignment           : 7 8
constant             : 19
declaringvariables   : 1
descriptionofcalculations : 1
expression           : 9 12 13 13 14 14 15 15 16 16
identifier           : 3 4 9 18
listofassignments    : 6 7
listofvariables      : 2 3
operand              : 17
program              : 0
subexpression        : 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaringvariables descriptionofcalculations
    (2) declaringvariables -> . TYPE listofvariables SEMICOLON

    TYPE            shift and go to state 3

    program                        shift and go to state 1
    declaringvariables             shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declaringvariables . descriptionofcalculations
    (6) descriptionofcalculations -> . listofassignments
    (7) listofassignments -> . assignment listofassignments
    (8) listofassignments -> . assignment
    (9) assignment -> . identifier ASSIGN expression
    (5) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    descriptionofcalculations      shift and go to state 4
    listofassignments              shift and go to state 5
    assignment                     shift and go to state 6
    identifier                     shift and go to state 7

state 3

    (2) declaringvariables -> TYPE . listofvariables SEMICOLON
    (3) listofvariables -> . identifier COMMA listofvariables
    (4) listofvariables -> . identifier
    (5) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    listofvariables                shift and go to state 9
    identifier                     shift and go to state 10

state 4

    (1) program -> declaringvariables descriptionofcalculations .

    $end            reduce using rule 1 (program -> declaringvariables descriptionofcalculations .)


state 5

    (6) descriptionofcalculations -> listofassignments .

    $end            reduce using rule 6 (descriptionofcalculations -> listofassignments .)


state 6

    (7) listofassignments -> assignment . listofassignments
    (8) listofassignments -> assignment .
    (7) listofassignments -> . assignment listofassignments
    (8) listofassignments -> . assignment
    (9) assignment -> . identifier ASSIGN expression
    (5) identifier -> . IDENTIFIER

    $end            reduce using rule 8 (listofassignments -> assignment .)
    IDENTIFIER      shift and go to state 8

    assignment                     shift and go to state 6
    listofassignments              shift and go to state 11
    identifier                     shift and go to state 7

state 7

    (9) assignment -> identifier . ASSIGN expression

    ASSIGN          shift and go to state 12


state 8

    (5) identifier -> IDENTIFIER .

    ASSIGN          reduce using rule 5 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 5 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (identifier -> IDENTIFIER .)
    BINARY_PLUS     reduce using rule 5 (identifier -> IDENTIFIER .)
    BINARY_UNARY_MINUS reduce using rule 5 (identifier -> IDENTIFIER .)
    BINARY_MULTIPLY reduce using rule 5 (identifier -> IDENTIFIER .)
    BINARY_DIVIDE   reduce using rule 5 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (identifier -> IDENTIFIER .)
    $end            reduce using rule 5 (identifier -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 5 (identifier -> IDENTIFIER .)


state 9

    (2) declaringvariables -> TYPE listofvariables . SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (3) listofvariables -> identifier . COMMA listofvariables
    (4) listofvariables -> identifier .

    COMMA           shift and go to state 14
    SEMICOLON       reduce using rule 4 (listofvariables -> identifier .)


state 11

    (7) listofassignments -> assignment listofassignments .

    $end            reduce using rule 7 (listofassignments -> assignment listofassignments .)


state 12

    (9) assignment -> identifier ASSIGN . expression
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    BINARY_UNARY_MINUS shift and go to state 17
    LEFT_BRACKET    shift and go to state 19
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    identifier                     shift and go to state 15
    expression                     shift and go to state 16
    subexpression                  shift and go to state 18
    operand                        shift and go to state 20
    constant                       shift and go to state 21

state 13

    (2) declaringvariables -> TYPE listofvariables SEMICOLON .

    IDENTIFIER      reduce using rule 2 (declaringvariables -> TYPE listofvariables SEMICOLON .)


state 14

    (3) listofvariables -> identifier COMMA . listofvariables
    (3) listofvariables -> . identifier COMMA listofvariables
    (4) listofvariables -> . identifier
    (5) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 10
    listofvariables                shift and go to state 23

state 15

    (18) operand -> identifier .

    BINARY_PLUS     reduce using rule 18 (operand -> identifier .)
    BINARY_UNARY_MINUS reduce using rule 18 (operand -> identifier .)
    BINARY_MULTIPLY reduce using rule 18 (operand -> identifier .)
    BINARY_DIVIDE   reduce using rule 18 (operand -> identifier .)
    IDENTIFIER      reduce using rule 18 (operand -> identifier .)
    $end            reduce using rule 18 (operand -> identifier .)
    RIGHT_BRACKET   reduce using rule 18 (operand -> identifier .)


state 16

    (9) assignment -> identifier ASSIGN expression .
    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    IDENTIFIER      reduce using rule 9 (assignment -> identifier ASSIGN expression .)
    $end            reduce using rule 9 (assignment -> identifier ASSIGN expression .)
    BINARY_PLUS     shift and go to state 24
    BINARY_UNARY_MINUS shift and go to state 25
    BINARY_MULTIPLY shift and go to state 26
    BINARY_DIVIDE   shift and go to state 27


state 17

    (10) expression -> BINARY_UNARY_MINUS . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    LEFT_BRACKET    shift and go to state 19
    BINARY_UNARY_MINUS shift and go to state 17
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    subexpression                  shift and go to state 28
    expression                     shift and go to state 29
    operand                        shift and go to state 20
    identifier                     shift and go to state 15
    constant                       shift and go to state 21

state 18

    (11) expression -> subexpression .

    BINARY_PLUS     reduce using rule 11 (expression -> subexpression .)
    BINARY_UNARY_MINUS reduce using rule 11 (expression -> subexpression .)
    BINARY_MULTIPLY reduce using rule 11 (expression -> subexpression .)
    BINARY_DIVIDE   reduce using rule 11 (expression -> subexpression .)
    IDENTIFIER      reduce using rule 11 (expression -> subexpression .)
    $end            reduce using rule 11 (expression -> subexpression .)
    RIGHT_BRACKET   reduce using rule 11 (expression -> subexpression .)


state 19

    (12) subexpression -> LEFT_BRACKET . expression RIGHT_BRACKET
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    BINARY_UNARY_MINUS shift and go to state 17
    LEFT_BRACKET    shift and go to state 19
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    expression                     shift and go to state 30
    subexpression                  shift and go to state 18
    operand                        shift and go to state 20
    identifier                     shift and go to state 15
    constant                       shift and go to state 21

state 20

    (17) subexpression -> operand .

    BINARY_PLUS     reduce using rule 17 (subexpression -> operand .)
    BINARY_UNARY_MINUS reduce using rule 17 (subexpression -> operand .)
    BINARY_MULTIPLY reduce using rule 17 (subexpression -> operand .)
    BINARY_DIVIDE   reduce using rule 17 (subexpression -> operand .)
    IDENTIFIER      reduce using rule 17 (subexpression -> operand .)
    $end            reduce using rule 17 (subexpression -> operand .)
    RIGHT_BRACKET   reduce using rule 17 (subexpression -> operand .)


state 21

    (19) operand -> constant .

    BINARY_PLUS     reduce using rule 19 (operand -> constant .)
    BINARY_UNARY_MINUS reduce using rule 19 (operand -> constant .)
    BINARY_MULTIPLY reduce using rule 19 (operand -> constant .)
    BINARY_DIVIDE   reduce using rule 19 (operand -> constant .)
    IDENTIFIER      reduce using rule 19 (operand -> constant .)
    $end            reduce using rule 19 (operand -> constant .)
    RIGHT_BRACKET   reduce using rule 19 (operand -> constant .)


state 22

    (20) constant -> CONSTANT .

    BINARY_PLUS     reduce using rule 20 (constant -> CONSTANT .)
    BINARY_UNARY_MINUS reduce using rule 20 (constant -> CONSTANT .)
    BINARY_MULTIPLY reduce using rule 20 (constant -> CONSTANT .)
    BINARY_DIVIDE   reduce using rule 20 (constant -> CONSTANT .)
    IDENTIFIER      reduce using rule 20 (constant -> CONSTANT .)
    $end            reduce using rule 20 (constant -> CONSTANT .)
    RIGHT_BRACKET   reduce using rule 20 (constant -> CONSTANT .)


state 23

    (3) listofvariables -> identifier COMMA listofvariables .

    SEMICOLON       reduce using rule 3 (listofvariables -> identifier COMMA listofvariables .)


state 24

    (13) subexpression -> expression BINARY_PLUS . expression
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    BINARY_UNARY_MINUS shift and go to state 17
    LEFT_BRACKET    shift and go to state 19
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    expression                     shift and go to state 31
    subexpression                  shift and go to state 18
    operand                        shift and go to state 20
    identifier                     shift and go to state 15
    constant                       shift and go to state 21

state 25

    (14) subexpression -> expression BINARY_UNARY_MINUS . expression
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    BINARY_UNARY_MINUS shift and go to state 17
    LEFT_BRACKET    shift and go to state 19
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    expression                     shift and go to state 32
    subexpression                  shift and go to state 18
    operand                        shift and go to state 20
    identifier                     shift and go to state 15
    constant                       shift and go to state 21

state 26

    (15) subexpression -> expression BINARY_MULTIPLY . expression
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    BINARY_UNARY_MINUS shift and go to state 17
    LEFT_BRACKET    shift and go to state 19
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    expression                     shift and go to state 33
    subexpression                  shift and go to state 18
    operand                        shift and go to state 20
    identifier                     shift and go to state 15
    constant                       shift and go to state 21

state 27

    (16) subexpression -> expression BINARY_DIVIDE . expression
    (10) expression -> . BINARY_UNARY_MINUS subexpression
    (11) expression -> . subexpression
    (12) subexpression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (13) subexpression -> . expression BINARY_PLUS expression
    (14) subexpression -> . expression BINARY_UNARY_MINUS expression
    (15) subexpression -> . expression BINARY_MULTIPLY expression
    (16) subexpression -> . expression BINARY_DIVIDE expression
    (17) subexpression -> . operand
    (18) operand -> . identifier
    (19) operand -> . constant
    (5) identifier -> . IDENTIFIER
    (20) constant -> . CONSTANT

    BINARY_UNARY_MINUS shift and go to state 17
    LEFT_BRACKET    shift and go to state 19
    IDENTIFIER      shift and go to state 8
    CONSTANT        shift and go to state 22

    expression                     shift and go to state 34
    subexpression                  shift and go to state 18
    operand                        shift and go to state 20
    identifier                     shift and go to state 15
    constant                       shift and go to state 21

state 28

    (10) expression -> BINARY_UNARY_MINUS subexpression .
    (11) expression -> subexpression .

  ! reduce/reduce conflict for BINARY_PLUS resolved using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
  ! reduce/reduce conflict for BINARY_UNARY_MINUS resolved using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
  ! reduce/reduce conflict for BINARY_MULTIPLY resolved using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
  ! reduce/reduce conflict for BINARY_DIVIDE resolved using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    BINARY_PLUS     reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    BINARY_UNARY_MINUS reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    BINARY_MULTIPLY reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    BINARY_DIVIDE   reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    IDENTIFIER      reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    $end            reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)
    RIGHT_BRACKET   reduce using rule 10 (expression -> BINARY_UNARY_MINUS subexpression .)

  ! BINARY_PLUS     [ reduce using rule 11 (expression -> subexpression .) ]
  ! BINARY_UNARY_MINUS [ reduce using rule 11 (expression -> subexpression .) ]
  ! BINARY_MULTIPLY [ reduce using rule 11 (expression -> subexpression .) ]
  ! BINARY_DIVIDE   [ reduce using rule 11 (expression -> subexpression .) ]


state 29

    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    BINARY_PLUS     shift and go to state 24
    BINARY_UNARY_MINUS shift and go to state 25
    BINARY_MULTIPLY shift and go to state 26
    BINARY_DIVIDE   shift and go to state 27


state 30

    (12) subexpression -> LEFT_BRACKET expression . RIGHT_BRACKET
    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    RIGHT_BRACKET   shift and go to state 35
    BINARY_PLUS     shift and go to state 24
    BINARY_UNARY_MINUS shift and go to state 25
    BINARY_MULTIPLY shift and go to state 26
    BINARY_DIVIDE   shift and go to state 27


state 31

    (13) subexpression -> expression BINARY_PLUS expression .
    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    BINARY_PLUS     reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .)
    BINARY_UNARY_MINUS reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .)
    IDENTIFIER      reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .)
    $end            reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .)
    RIGHT_BRACKET   reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .)
    BINARY_MULTIPLY shift and go to state 26
    BINARY_DIVIDE   shift and go to state 27

  ! BINARY_MULTIPLY [ reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .) ]
  ! BINARY_DIVIDE   [ reduce using rule 13 (subexpression -> expression BINARY_PLUS expression .) ]
  ! BINARY_PLUS     [ shift and go to state 24 ]
  ! BINARY_UNARY_MINUS [ shift and go to state 25 ]


state 32

    (14) subexpression -> expression BINARY_UNARY_MINUS expression .
    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    BINARY_PLUS     reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .)
    BINARY_UNARY_MINUS reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .)
    IDENTIFIER      reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .)
    $end            reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .)
    RIGHT_BRACKET   reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .)
    BINARY_MULTIPLY shift and go to state 26
    BINARY_DIVIDE   shift and go to state 27

  ! BINARY_MULTIPLY [ reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .) ]
  ! BINARY_DIVIDE   [ reduce using rule 14 (subexpression -> expression BINARY_UNARY_MINUS expression .) ]
  ! BINARY_PLUS     [ shift and go to state 24 ]
  ! BINARY_UNARY_MINUS [ shift and go to state 25 ]


state 33

    (15) subexpression -> expression BINARY_MULTIPLY expression .
    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    BINARY_PLUS     reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)
    BINARY_UNARY_MINUS reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)
    BINARY_MULTIPLY reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)
    BINARY_DIVIDE   reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)
    IDENTIFIER      reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)
    $end            reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)
    RIGHT_BRACKET   reduce using rule 15 (subexpression -> expression BINARY_MULTIPLY expression .)

  ! BINARY_PLUS     [ shift and go to state 24 ]
  ! BINARY_UNARY_MINUS [ shift and go to state 25 ]
  ! BINARY_MULTIPLY [ shift and go to state 26 ]
  ! BINARY_DIVIDE   [ shift and go to state 27 ]


state 34

    (16) subexpression -> expression BINARY_DIVIDE expression .
    (13) subexpression -> expression . BINARY_PLUS expression
    (14) subexpression -> expression . BINARY_UNARY_MINUS expression
    (15) subexpression -> expression . BINARY_MULTIPLY expression
    (16) subexpression -> expression . BINARY_DIVIDE expression

    BINARY_PLUS     reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)
    BINARY_UNARY_MINUS reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)
    BINARY_MULTIPLY reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)
    BINARY_DIVIDE   reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)
    IDENTIFIER      reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)
    $end            reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)
    RIGHT_BRACKET   reduce using rule 16 (subexpression -> expression BINARY_DIVIDE expression .)

  ! BINARY_PLUS     [ shift and go to state 24 ]
  ! BINARY_UNARY_MINUS [ shift and go to state 25 ]
  ! BINARY_MULTIPLY [ shift and go to state 26 ]
  ! BINARY_DIVIDE   [ shift and go to state 27 ]


state 35

    (12) subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .

    BINARY_PLUS     reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    BINARY_UNARY_MINUS reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    BINARY_MULTIPLY reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    BINARY_DIVIDE   reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    $end            reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 12 (subexpression -> LEFT_BRACKET expression RIGHT_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 28 resolved using rule (expression -> BINARY_UNARY_MINUS subexpression)
WARNING: rejected rule (expression -> subexpression) in state 28
